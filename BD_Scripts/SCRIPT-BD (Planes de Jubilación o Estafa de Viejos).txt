-- 1. Creación de Tablas Principales

-- Tabla Usuarios
CREATE TABLE IF NOT EXISTS Usuarios (
    id_usuario SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    direccion TEXT NOT NULL,
    contacto VARCHAR(50) NOT NULL,
    cedula VARCHAR(50) NOT NULL,
    rol VARCHAR(20) CHECK (rol IN ('administrador', 'usuario')) NOT NULL,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    contraseña_hash VARCHAR(255) NOT NULL -- Campo para almacenar el hash de la contraseña
);

-- Tabla Planes de Jubilación (solo lista los planes disponibles)
CREATE TABLE IF NOT EXISTS Planes_de_Jubilacion (
    id_plan SERIAL PRIMARY KEY,
    tipo_plan VARCHAR(50) NOT NULL,
    monto_minimo_aportacion NUMERIC(10, 2) NOT NULL,
    tasa_interes NUMERIC(5, 2) NOT NULL,
    descripcion TEXT
);

-- Nueva tabla para la relación entre Usuarios y Planes de Jubilación
CREATE TABLE IF NOT EXISTS Planes_Usuarios (
    id_plan_usuario SERIAL PRIMARY KEY,
    id_usuario INT REFERENCES Usuarios(id_usuario) ON DELETE CASCADE,
    id_plan INT REFERENCES Planes_de_Jubilacion(id_plan) ON DELETE CASCADE,
    id_beneficiario INT REFERENCES Beneficiarios(id_beneficiario) ON DELETE SET NULL  -- Beneficiario opcional
);

-- Tabla Beneficiarios
CREATE TABLE IF NOT EXISTS Beneficiarios (
    id_beneficiario SERIAL PRIMARY KEY,
    id_usuario INT REFERENCES Usuarios(id_usuario) ON DELETE CASCADE,
    nombre_beneficiario VARCHAR(100) NOT NULL,
    relacion VARCHAR(50),
    porcentaje_asignado NUMERIC(5, 2) CHECK (porcentaje_asignado <= 100 AND porcentaje_asignado >= 0)
);

-- Tabla Pagos
CREATE TABLE IF NOT EXISTS Pagos (
    id_pago SERIAL PRIMARY KEY,
    id_usuario INT REFERENCES Usuarios(id_usuario) ON DELETE CASCADE,
    fecha_pago TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    monto NUMERIC(10, 2) NOT NULL,
    metodo_pago VARCHAR(50),
    estado VARCHAR(20) CHECK (estado IN ('completado', 'pendiente')) NOT NULL
);

-- Tabla Estados de Cuenta
CREATE TABLE IF NOT EXISTS Estados_de_Cuenta (
    id_estado SERIAL PRIMARY KEY,
    id_usuario INT REFERENCES Usuarios(id_usuario) ON DELETE CASCADE,
    saldo_actual NUMERIC(12, 2) DEFAULT 0,
    aportaciones_realizadas NUMERIC(12, 2) DEFAULT 0,
    intereses_acumulados NUMERIC(12, 2) DEFAULT 0,
    ultima_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2. Creación de Roles para la API

-- Crea roles básicos para permisos en las tablas si no existen
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'administrador_api') THEN
        CREATE ROLE administrador_api;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'usuario_api') THEN
        CREATE ROLE usuario_api;
    END IF;
END $$;

-- Da permisos a los roles
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO administrador_api;
GRANT SELECT ON Usuarios, Planes_de_Jubilacion, Beneficiarios, Pagos, Estados_de_Cuenta TO usuario_api;

-- 3. Usuario único de conexión para la API

-- Crea un usuario de base de datos exclusivo para la API si no existe
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'api_user') THEN
        CREATE USER api_user WITH PASSWORD 'api_password';
        GRANT administrador_api TO api_user;  -- Concede permisos administrativos para la API
    END IF;
END $$;

-- 4. Creación de Vistas para Controlar el Acceso

-- Vista para el Usuario, permite que vea solo sus datos y planes asignados
CREATE OR REPLACE VIEW vista_usuario AS
SELECT 
    u.id_usuario, 
    u.nombre, 
    pj.tipo_plan, 
    pj.monto_minimo_aportacion, 
    pj.tasa_interes, 
    e.saldo_actual, 
    e.aportaciones_realizadas, 
    e.intereses_acumulados, 
    b.nombre_beneficiario, 
    b.relacion, 
    b.porcentaje_asignado
FROM Usuarios u
JOIN Planes_Usuarios pu ON u.id_usuario = pu.id_usuario
JOIN Planes_de_Jubilacion pj ON pu.id_plan = pj.id_plan
LEFT JOIN Beneficiarios b ON pu.id_beneficiario = b.id_beneficiario
LEFT JOIN Estados_de_Cuenta e ON u.id_usuario = e.id_usuario;

-- Vista de Pagos para el usuario
CREATE OR REPLACE VIEW vista_pagos_usuario AS
SELECT
    u.id_usuario,
    p.id_pago, 
    p.fecha_pago, 
    p.monto, 
    p.metodo_pago, 
    p.estado
FROM Pagos p
JOIN Usuarios u ON p.id_usuario = u.id_usuario;

-- Vista completa para el administrador, con acceso a todos los datos
CREATE OR REPLACE VIEW vista_administrador AS
SELECT 
    u.id_usuario AS usuario_id, 
    u.nombre AS usuario_nombre, 
    u.direccion, 
    u.contacto, 
    u.rol, 
    u.fecha_registro,
    pj.id_plan AS plan_id, 
    pj.tipo_plan, 
    pj.monto_minimo_aportacion, 
    pj.tasa_interes, 
    pj.descripcion,
    e.id_estado AS estado_id, 
    e.saldo_actual, 
    e.aportaciones_realizadas, 
    e.intereses_acumulados, 
    e.ultima_actualizacion,
    b.id_beneficiario AS beneficiario_id, 
    b.nombre_beneficiario, 
    b.relacion, 
    b.porcentaje_asignado,
    pa.id_pago AS pago_id, 
    pa.fecha_pago, 
    pa.monto, 
    pa.metodo_pago, 
    pa.estado
FROM Usuarios u
LEFT JOIN Planes_Usuarios pu ON u.id_usuario = pu.id_usuario
LEFT JOIN Planes_de_Jubilacion pj ON pu.id_plan = pj.id_plan
LEFT JOIN Estados_de_Cuenta e ON u.id_usuario = e.id_usuario
LEFT JOIN Beneficiarios b ON pu.id_beneficiario = b.id_beneficiario
LEFT JOIN Pagos pa ON u.id_usuario = pa.id_usuario;

-- 5. Asignación de Permisos sobre las Vistas
GRANT SELECT ON vista_usuario, vista_pagos_usuario TO usuario_api;
GRANT SELECT, INSERT, UPDATE, DELETE ON vista_administrador TO administrador_api;

-- 6. Configuración Adicional de Seguridad

-- Revocar acceso directo a las tablas para el rol de usuario
REVOKE ALL ON Usuarios, Planes_de_Jubilacion, Beneficiarios, Pagos, Estados_de_Cuenta FROM usuario_api;

-- Permisos predeterminados para nuevas tablas y secuencias en el esquema "public" para el rol de administrador
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO administrador_api;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO administrador_api;
